name: üöÄ Deploy and Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Sundays at 6:00 AM UTC
    - cron: '0 6 * * 0'

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Security scanning job
  security-scan:
    runs-on: ubuntu-latest
    name: üîí Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency check job
  dependency-check:
    runs-on: ubuntu-latest
    name: üìã Dependency Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit (if package.json exists)
        run: |
          if [ -f "package.json" ]; then
            npm audit --audit-level moderate
          else
            echo "No package.json found - skipping npm audit"
          fi
        continue-on-error: true

  # Build and deploy to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check]
    name: üåê Deploy to GitHub Pages
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby (for Jekyll)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        
      - name: Build with Jekyll
        run: |
          # Create Gemfile if it doesn't exist
          if [ ! -f "Gemfile" ]; then
            echo "source 'https://rubygems.org'" > Gemfile
            echo "gem 'github-pages', group: :jekyll_plugins" >> Gemfile
            echo "gem 'jekyll-redirect-from'" >> Gemfile
            echo "gem 'jekyll-sitemap'" >> Gemfile
          fi
          
          # Install dependencies
          bundle install
          
          # Build the site
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          
      - name: Security check on built files
        run: |
          echo "Checking for sensitive information in built files..."
          # Check for common sensitive patterns
          if grep -r "password\|secret\|key\|token" _site/ --exclude-dir=assets 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: Potential sensitive information found"
          else
            echo "‚úÖ No sensitive information detected"
          fi
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Performance and accessibility testing
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    name: üí° Lighthouse Performance Audit
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Wait for deployment
        run: sleep 60
        
      - name: Lighthouse CI Action
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://darkcyberx.github.io/pubg-license-dashboard/
            https://darkcyberx.github.io/pubg-license-dashboard/dashboard/
          configPath: '.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

  # Security headers validation
  security-headers:
    runs-on: ubuntu-latest
    needs: deploy
    name: üõ°Ô∏è Security Headers Check
    steps:
      - name: Wait for deployment
        run: sleep 60
        
      - name: Check security headers
        run: |
          echo "Checking security headers for deployed site..."
          
          # Check main page
          echo "=== Main Page Headers ==="
          curl -I https://darkcyberx.github.io/pubg-license-dashboard/ || true
          
          # Check dashboard page
          echo "=== Dashboard Headers ==="
          curl -I https://darkcyberx.github.io/pubg-license-dashboard/dashboard/ || true
          
          # Validate specific security headers
          echo "=== Security Header Validation ==="
          HEADERS=$(curl -s -I https://darkcyberx.github.io/pubg-license-dashboard/dashboard/)
          
          if echo "$HEADERS" | grep -i "x-frame-options"; then
            echo "‚úÖ X-Frame-Options header found"
          else
            echo "‚ùå X-Frame-Options header missing"
          fi
          
          if echo "$HEADERS" | grep -i "x-content-type-options"; then
            echo "‚úÖ X-Content-Type-Options header found"
          else
            echo "‚ùå X-Content-Type-Options header missing"
          fi
          
          echo "Security header check completed"
        continue-on-error: true

  # Final status report
  report:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, deploy, lighthouse, security-headers]
    name: üìä Deployment Report
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "## üöÄ Deployment Report"
          echo ""
          echo "**Repository:** ${{ github.repository }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Triggered by:** ${{ github.event_name }}"
          echo ""
          echo "### Job Status"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Dependency Check: ${{ needs.dependency-check.result }}"
          echo "- Deploy: ${{ needs.deploy.result }}"
          echo "- Lighthouse Audit: ${{ needs.lighthouse.result }}"
          echo "- Security Headers: ${{ needs.security-headers.result }}"
          echo ""
          echo "### Live URLs"
          echo "- üè† Homepage: https://darkcyberx.github.io/pubg-license-dashboard/"
          echo "- üìä Dashboard: https://darkcyberx.github.io/pubg-license-dashboard/dashboard/"
          echo ""
          echo "### Credentials"
          echo "- Username: \`pubg_admin\`"
          echo "- Password: \`SecurePUBG2024!@#\`"
          echo ""
          echo "‚úÖ Deployment completed successfully!"